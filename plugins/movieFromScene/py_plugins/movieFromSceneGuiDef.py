#! /usr/bin/env python3
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 7.6
#  in conjunction with Tcl version 8.6
#    Jan 07, 2023 02:18:01 AM EST  platform: Windows NT

import sys
import json
import log
import tkinter as tk
from tkinter import messagebox
from tkinter.constants import *
import os.path

_script = sys.argv[0]
_location = os.path.dirname(_script).replace( '\\' , '/' )
_configFile = _location + "/movieFromScene.config"

import movieFromSceneGui as myGui

_bgcolor = '#d9d9d9'  # X11 color: 'gray85'
_fgcolor = '#000000'  # X11 color: 'black'
_compcolor = 'gray40' # X11 color: #666666
_ana1color = '#c3c3c3' # Closest X11 color: 'gray76'
_ana2color = 'beige' # X11 color: #f5f5dc
_tabfg1 = 'black' 
_tabfg2 = 'black' 
_tabbg1 = 'grey75' 
_tabbg2 = 'grey89' 
_bgmode = 'light' 

class Toplevel1:
	def __init__(self, top):
		'''This class configures and populates the toplevel window.
		   top is the toplevel containing window.'''
		self.config = getConfig()
		self.runmode = tk.StringVar(value=self.config['mode'])
		ct = self.config['criteria']
		self.bHasNoMovie = tk.BooleanVar( value=ct['no movie'] )
		self.bHasTitle = tk.BooleanVar( value=ct['title'] )
		self.bHasURL = tk.BooleanVar( value=ct['URL'] )
		self.bHasDate = tk.BooleanVar( value=ct['date'] )
		self.bHasStudio = tk.BooleanVar( value=ct['studio'] )
		self.bHasPerfromer = tk.BooleanVar( value=ct['performer'] )
		self.bHasTag = tk.BooleanVar( value=ct['tag'] )
		self.bHasDetails = tk.BooleanVar( value=ct['details'] )
		self.bIsOrganized = tk.BooleanVar( value=ct['organized'] )

		top.geometry("427x527+283+169")
		top.minsize(120, 1)
		top.maxsize(2198, 1215)
		top.resizable(1,  1)
		top.title("Configuration")
		top.configure(background="#d9d9d9")

		self.top = top

		# ==================== Frame 1 ===========================
		self.frame1 = tk.LabelFrame(self.top)
		self.frame1.place(relx=0.047, rely=0.076, relheight=0.167
				, relwidth=0.831)
		self.frame1.configure(relief='groove')
		self.frame1.configure(font="-family {Segoe UI} -size 12")
		self.frame1.configure(foreground="#000000")
		self.frame1.configure(text='Run Mode')
		self.frame1.configure(background="#d9d9d9")
		self.frame1.configure(cursor="fleur")

		self.RadioDisable = tk.Radiobutton(self.frame1, variable=self.runmode, value='disable')
		self.RadioDisable.place(relx=0.085, rely=0.341, relheight=0.386
				, relwidth=0.239, bordermode='ignore')
		self.RadioDisable.configure(activebackground="beige")
		self.RadioDisable.configure(activeforeground="black")
		self.RadioDisable.configure(anchor='w')
		self.RadioDisable.configure(background="#d9d9d9")
		self.RadioDisable.configure(compound='left')
		self.RadioDisable.configure(disabledforeground="#a3a3a3")
		self.RadioDisable.configure(font="-family {Segoe UI} -size 11")
		self.RadioDisable.configure(foreground="#000000")
		self.RadioDisable.configure(highlightbackground="#d9d9d9")
		self.RadioDisable.configure(highlightcolor="black")
		self.RadioDisable.configure(justify='left')
		self.RadioDisable.configure(selectcolor="#d9d9d9")
		self.RadioDisable.configure(text='Disable')
		self.RadioDisable_tooltip = \
		ToolTip(self.RadioDisable, 'The plugin is currently disabled.')

		self.RadioEnable = tk.Radiobutton(self.frame1, variable=self.runmode, value='enable')
		self.RadioEnable.place(relx=0.366, rely=0.341, relheight=0.398
				, relwidth=0.237, bordermode='ignore')
		self.RadioEnable.configure(activebackground="beige")
		self.RadioEnable.configure(activeforeground="black")
		self.RadioEnable.configure(anchor='w')
		self.RadioEnable.configure(background="#d9d9d9")
		self.RadioEnable.configure(compound='left')
		self.RadioEnable.configure(disabledforeground="#a3a3a3")
		self.RadioEnable.configure(font="-family {Segoe UI} -size 11")
		self.RadioEnable.configure(foreground="#000000")
		self.RadioEnable.configure(highlightbackground="#d9d9d9")
		self.RadioEnable.configure(highlightcolor="black")
		self.RadioEnable.configure(justify='left')
		self.RadioEnable.configure(selectcolor="#d9d9d9")
		self.RadioEnable.configure(text='''Enable''')
		self.RadioEnable_tooltip = \
		ToolTip(self.RadioEnable, 'The plugin is currently enabled.')

		self.RadioDryrun = tk.Radiobutton(self.frame1, variable=self.runmode, value='dryrun')
		self.RadioDryrun.place(relx=0.704, rely=0.341, relheight=0.398
				, relwidth=0.237, bordermode='ignore')
		self.RadioDryrun.configure(activebackground="beige")
		self.RadioDryrun.configure(activeforeground="black")
		self.RadioDryrun.configure(anchor='w')
		self.RadioDryrun.configure(background="#d9d9d9")
		self.RadioDryrun.configure(compound='left')
		self.RadioDryrun.configure(disabledforeground="#a3a3a3")
		self.RadioDryrun.configure(font="-family {Segoe UI} -size 11")
		self.RadioDryrun.configure(foreground="#000000")
		self.RadioDryrun.configure(highlightbackground="#d9d9d9")
		self.RadioDryrun.configure(highlightcolor="black")
		self.RadioDryrun.configure(justify='left')
		self.RadioDryrun.configure(selectcolor="#d9d9d9")
		self.RadioDryrun.configure(text='Dry Run')
		self.RadioDryrun_tooltip = \
		ToolTip(self.RadioDryrun, 'The plugin will run, but will not create any movies.')

		# ==================== Frame 2 ===========================
		self.Frame2 = tk.LabelFrame(self.top)
		self.Frame2.place(relx=0.047, rely=0.266, relheight=0.7, relwidth=0.82)
		self.Frame2.configure(relief='groove')
		self.Frame2.configure(font="-family {Segoe UI} -size 12")
		self.Frame2.configure(foreground="#000000")
		self.Frame2.configure(text='Criteria')
		self.Frame2.configure(background="#d9d9d9")
		self.Label1 = tk.Label(self.Frame2)
		self.Label1.place(relx=0.057, rely=0.081, height=50, width=284
				, bordermode='ignore')
		self.Label1.configure(anchor='w')
		self.Label1.configure(background="#d9d9d9")
		self.Label1.configure(compound='left')
		self.Label1.configure(disabledforeground="#a3a3a3")
		self.Label1.configure(font="-family {Segoe UI} -size 11")
		self.Label1.configure(foreground="#000000")
		self.Label1.configure(justify='left')
		self.Label1.configure(text='''The plugin will auto-create a movie
when the following criteria are all true:''')

		self.chkTitle = tk.Checkbutton(self.Frame2, variable=self.bHasTitle, onvalue=True, offvalue=False)
		self.chkTitle.place(relx=0.057, rely=0.298, relheight=0.084
				, relwidth=0.431, bordermode='ignore')
		self.chkTitle.configure(activebackground="beige")
		self.chkTitle.configure(activeforeground="black")
		self.chkTitle.configure(anchor='w')
		self.chkTitle.configure(background="#d9d9d9")
		self.chkTitle.configure(compound='left')
		self.chkTitle.configure(disabledforeground="#a3a3a3")
		self.chkTitle.configure(font="-family {Segoe UI} -size 12")
		self.chkTitle.configure(foreground="#000000")
		self.chkTitle.configure(highlightbackground="#d9d9d9")
		self.chkTitle.configure(highlightcolor="black")
		self.chkTitle.configure(justify='left')
		self.chkTitle.configure(selectcolor="#d9d9d9")
		self.chkTitle.configure(text='Has Title')
		self.chkTitle_tooltip = \
		ToolTip(self.chkTitle, 'The criteria fits if the scene has a title.')

		self.chkNoMovie = tk.Checkbutton(self.Frame2, variable=self.bHasNoMovie, onvalue=True, offvalue=False)
		self.chkNoMovie.place(relx=0.057, rely=0.217, relheight=0.084
				, relwidth=0.431, bordermode='ignore')
		self.chkNoMovie.configure(activebackground="beige")
		self.chkNoMovie.configure(activeforeground="black")
		self.chkNoMovie.configure(anchor='w')
		self.chkNoMovie.configure(background="#d9d9d9")
		self.chkNoMovie.configure(compound='left')
		self.chkNoMovie.configure(disabledforeground="#a3a3a3")
		self.chkNoMovie.configure(font="-family {Segoe UI} -size 12")
		self.chkNoMovie.configure(foreground="#000000")
		self.chkNoMovie.configure(highlightbackground="#d9d9d9")
		self.chkNoMovie.configure(highlightcolor="black")
		self.chkNoMovie.configure(justify='left')
		self.chkNoMovie.configure(selectcolor="#d9d9d9")
		self.chkNoMovie.configure(text='Has No Movie')
		self.chkNoMovie_tooltip = \
		ToolTip(self.chkNoMovie, 'The criteria fits if the scene does not have any movie yet.')

		self.chkURL = tk.Checkbutton(self.Frame2, variable=self.bHasURL, onvalue=True, offvalue=False)
		self.chkURL.place(relx=0.057, rely=0.379, relheight=0.084, relwidth=0.431
				, bordermode='ignore')
		self.chkURL.configure(activebackground="beige")
		self.chkURL.configure(activeforeground="black")
		self.chkURL.configure(anchor='w')
		self.chkURL.configure(background="#d9d9d9")
		self.chkURL.configure(compound='left')
		self.chkURL.configure(disabledforeground="#a3a3a3")
		self.chkURL.configure(font="-family {Segoe UI} -size 12")
		self.chkURL.configure(foreground="#000000")
		self.chkURL.configure(highlightbackground="#d9d9d9")
		self.chkURL.configure(highlightcolor="black")
		self.chkURL.configure(justify='left')
		self.chkURL.configure(selectcolor="#d9d9d9")
		self.chkURL.configure(text='Has URL')
		self.chkURL_tooltip = \
		ToolTip(self.chkURL, 'The criteria fits if the scene has URL.')

		self.chkDate = tk.Checkbutton(self.Frame2, variable=self.bHasDate, onvalue=True, offvalue=False)
		self.chkDate.place(relx=0.057, rely=0.461, relheight=0.084
				, relwidth=0.431, bordermode='ignore')
		self.chkDate.configure(activebackground="beige")
		self.chkDate.configure(activeforeground="black")
		self.chkDate.configure(anchor='w')
		self.chkDate.configure(background="#d9d9d9")
		self.chkDate.configure(compound='left')
		self.chkDate.configure(disabledforeground="#a3a3a3")
		self.chkDate.configure(font="-family {Segoe UI} -size 12")
		self.chkDate.configure(foreground="#000000")
		self.chkDate.configure(highlightbackground="#d9d9d9")
		self.chkDate.configure(highlightcolor="black")
		self.chkDate.configure(justify='left')
		self.chkDate.configure(selectcolor="#d9d9d9")
		self.chkDate.configure(text='Has Date')
		self.chkDate_tooltip = \
		ToolTip(self.chkDate, 'The criteria fits if the scene has Date data.')

		self.chkStudio = tk.Checkbutton(self.Frame2, variable=self.bHasStudio, onvalue=True, offvalue=False)
		self.chkStudio.place(relx=0.057, rely=0.542, relheight=0.084
				, relwidth=0.431, bordermode='ignore')
		self.chkStudio.configure(activebackground="beige")
		self.chkStudio.configure(activeforeground="black")
		self.chkStudio.configure(anchor='w')
		self.chkStudio.configure(background="#d9d9d9")
		self.chkStudio.configure(compound='left')
		self.chkStudio.configure(disabledforeground="#a3a3a3")
		self.chkStudio.configure(font="-family {Segoe UI} -size 12")
		self.chkStudio.configure(foreground="#000000")
		self.chkStudio.configure(highlightbackground="#d9d9d9")
		self.chkStudio.configure(highlightcolor="black")
		self.chkStudio.configure(justify='left')
		self.chkStudio.configure(selectcolor="#d9d9d9")
		self.chkStudio.configure(text='Has Studio')
		self.chkStudio_tooltip = \
		ToolTip(self.chkStudio, 'The criteria fits if the scene has Studio data.')

		self.chkPerformer = tk.Checkbutton(self.Frame2, variable=self.bHasPerfromer, onvalue=True, offvalue=False)
		self.chkPerformer.place(relx=0.057, rely=0.626, relheight=0.084
				, relwidth=0.431, bordermode='ignore')
		self.chkPerformer.configure(activebackground="beige")
		self.chkPerformer.configure(activeforeground="black")
		self.chkPerformer.configure(anchor='w')
		self.chkPerformer.configure(background="#d9d9d9")
		self.chkPerformer.configure(compound='left')
		self.chkPerformer.configure(disabledforeground="#a3a3a3")
		self.chkPerformer.configure(font="-family {Segoe UI} -size 12")
		self.chkPerformer.configure(foreground="#000000")
		self.chkPerformer.configure(highlightbackground="#d9d9d9")
		self.chkPerformer.configure(highlightcolor="black")
		self.chkPerformer.configure(justify='left')
		self.chkPerformer.configure(selectcolor="#d9d9d9")
		self.chkPerformer.configure(text='Has Performer(s)')
		self.chkPerformer_tooltip = \
		ToolTip(self.chkPerformer, 'The criteria fits if the scene has Performer(s).')

		self.chkTag = tk.Checkbutton(self.Frame2, variable=self.bHasTag, onvalue=True, offvalue=False)
		self.chkTag.place(relx=0.057, rely=0.707, relheight=0.084, relwidth=0.431
				, bordermode='ignore')
		self.chkTag.configure(activebackground="beige")
		self.chkTag.configure(activeforeground="black")
		self.chkTag.configure(anchor='w')
		self.chkTag.configure(background="#d9d9d9")
		self.chkTag.configure(compound='left')
		self.chkTag.configure(disabledforeground="#a3a3a3")
		self.chkTag.configure(font="-family {Segoe UI} -size 12")
		self.chkTag.configure(foreground="#000000")
		self.chkTag.configure(highlightbackground="#d9d9d9")
		self.chkTag.configure(highlightcolor="black")
		self.chkTag.configure(justify='left')
		self.chkTag.configure(selectcolor="#d9d9d9")
		self.chkTag.configure(text='Has Tag(s)')
		self.chkTag_tooltip = \
		ToolTip(self.chkTag, 'The criteria fits if the scene has Tag(s).')

		self.chkDetails = tk.Checkbutton(self.Frame2, variable=self.bHasDetails, onvalue=True, offvalue=False)
		self.chkDetails.place(relx=0.057, rely=0.789, relheight=0.084
				, relwidth=0.431, bordermode='ignore')
		self.chkDetails.configure(activebackground="beige")
		self.chkDetails.configure(activeforeground="black")
		self.chkDetails.configure(anchor='w')
		self.chkDetails.configure(background="#d9d9d9")
		self.chkDetails.configure(compound='left')
		self.chkDetails.configure(disabledforeground="#a3a3a3")
		self.chkDetails.configure(font="-family {Segoe UI} -size 12")
		self.chkDetails.configure(foreground="#000000")
		self.chkDetails.configure(highlightbackground="#d9d9d9")
		self.chkDetails.configure(highlightcolor="black")
		self.chkDetails.configure(justify='left')
		self.chkDetails.configure(selectcolor="#d9d9d9")
		self.chkDetails.configure(text='Has Details')
		self.chkDetails_tooltip = \
		ToolTip(self.chkDetails, 'The criteria fits if the scene has Details.')

		self.chkOrganized = tk.Checkbutton(self.Frame2, variable=self.bIsOrganized, onvalue=True, offvalue=False)
		self.chkOrganized.place(relx=0.057, rely=0.867, relheight=0.084
				, relwidth=0.431, bordermode='ignore')
		self.chkOrganized.configure(activebackground="beige")
		self.chkOrganized.configure(activeforeground="black")
		self.chkOrganized.configure(anchor='w')
		self.chkOrganized.configure(background="#d9d9d9")
		self.chkOrganized.configure(compound='left')
		self.chkOrganized.configure(disabledforeground="#a3a3a3")
		self.chkOrganized.configure(font="-family {Segoe UI} -size 12")
		self.chkOrganized.configure(foreground="#000000")
		self.chkOrganized.configure(highlightbackground="#d9d9d9")
		self.chkOrganized.configure(highlightcolor="black")
		self.chkOrganized.configure(justify='left')
		self.chkOrganized.configure(selectcolor="#d9d9d9")
		self.chkOrganized.configure(text='Is Organized')
		self.chkOrganized_tooltip = \
		ToolTip(self.chkOrganized, "The criteria fits if the scene's Organized data is checked.")

		self.btnSave = tk.Button(self.Frame2, command=self.Save)
		self.btnSave.place(relx=0.571, rely=0.488, height=44, width=117
				, bordermode='ignore')
		self.btnSave.configure(activebackground="beige")
		self.btnSave.configure(activeforeground="black")
		self.btnSave.configure(background="#d9d9d9")
		self.btnSave.configure(compound='left')
		self.btnSave.configure(disabledforeground="#a3a3a3")
		self.btnSave.configure(font="-family {Segoe UI} -size 12")
		self.btnSave.configure(foreground="#000000")
		self.btnSave.configure(highlightbackground="#d9d9d9")
		self.btnSave.configure(highlightcolor="black")
		self.btnSave.configure(pady="0")
		self.btnSave.configure(text='Save Config')
		self.btnSave_tooltip = \
		ToolTip(self.btnSave, 'Save the config file for this plugin.')

		self.btnCancel = tk.Button(self.Frame2, command=self.Cancel)
		self.btnCancel.place(relx=0.571, rely=0.715, height=44, width=117
				, bordermode='ignore')
		self.btnCancel.configure(activebackground="beige")
		self.btnCancel.configure(activeforeground="black")
		self.btnCancel.configure(background="#d9d9d9")
		self.btnCancel.configure(compound='left')
		self.btnCancel.configure(disabledforeground="#a3a3a3")
		self.btnCancel.configure(font="-family {Segoe UI} -size 12")
		self.btnCancel.configure(foreground="#000000")
		self.btnCancel.configure(highlightbackground="#d9d9d9")
		self.btnCancel.configure(highlightcolor="black")
		self.btnCancel.configure(pady="0")
		self.btnCancel.configure(text='Cancel')

		self.Label2 = tk.Label(self.top)
		self.Label2.place(relx=0.117, rely=0.0, height=41, width=294)
		self.Label2.configure(anchor='w')
		self.Label2.configure(background="#d9d9d9")
		self.Label2.configure(compound='left')
		self.Label2.configure(disabledforeground="#a3a3a3")
		self.Label2.configure(font="-family {Segoe UI} -size 12 -weight bold")
		self.Label2.configure(foreground="#000000")
		self.Label2.configure(text='Auto-Create Move By Scene Update')

	# Save button
	def Save(self):
		c = self.config['criteria']
		match self.runmode.get():
			case "disable":
				self.config['mode'] = "disable"
			case "enable":
				self.config['mode'] = "enable"
			case "dryrun":
				self.config['mode'] = "dryrun"
		c['no movie'] = self.bHasNoMovie.get()
		c['title'] = self.bHasTitle.get()
		c['URL'] = self.bHasURL.get()
		c['date'] = self.bHasDate.get()
		c['studio'] = self.bHasStudio.get()
		c['performer'] = self.bHasPerfromer.get()
		c['tag'] = self.bHasTag.get()
		c['details'] = self.bHasDetails.get()
		c['organized'] = self.bIsOrganized.get()

		try:
			f = open( _configFile, "w")
			json.dump(self.config, f)
			f.close
		except Exception:
			messagebox.showerror("Error Saving", "Error in saving config file: " + _configFile )

		sys.exit()

	def Cancel(self):
		sys.exit()

from time import time, localtime, strftime
class ToolTip(tk.Toplevel):
	""" Provides a ToolTip widget for Tkinter. """
	def __init__(self, wdgt, msg=None, msgFunc=None, delay=0.5,
				 follow=True):
		self.wdgt = wdgt
		self.parent = self.wdgt.master
		tk.Toplevel.__init__(self, self.parent, bg='black', padx=1, pady=1)
		self.withdraw()
		self.overrideredirect(True)
		self.msgVar = tk.StringVar()
		if msg is None:
			self.msgVar.set('No message provided')
		else:
			self.msgVar.set(msg)
		self.msgFunc = msgFunc
		self.delay = delay
		self.follow = follow
		self.visible = 0
		self.lastMotion = 0
		self.msg = tk.Message(self, textvariable=self.msgVar, bg=_bgcolor,
				   fg=_fgcolor, font="TkDefaultFont",
				   aspect=1000)
		self.msg.grid()
		self.wdgt.bind('<Enter>', self.spawn, '+')
		self.wdgt.bind('<Leave>', self.hide, '+')
		self.wdgt.bind('<Motion>', self.move, '+')
	def spawn(self, event=None):
		self.visible = 1
		self.after(int(self.delay * 1000), self.show)
	def show(self):
		if self.visible == 1 and time() - self.lastMotion > self.delay:
			self.visible = 2
		if self.visible == 2:
			self.deiconify()
	def move(self, event):
		self.lastMotion = time()
		if self.follow is False:
			self.withdraw()
			self.visible = 1
		self.geometry('+%i+%i' % (event.x_root + 20, event.y_root - 10))
		try:
			self.msgVar.set(self.msgFunc())
		except:
			pass
		self.after(int(self.delay * 1000), self.show)
	def hide(self, event=None):
		self.visible = 0
		self.withdraw()
	def update(self, msg):
		self.msgVar.set(msg)
	def configure(self, **kwargs):
		backgroundset = False
		foregroundset = False
		# Get the current tooltip text just in case the user doesn't provide any.
		current_text = self.msgVar.get()
		# to clear the tooltip text, use the .update method
		if 'debug' in kwargs.keys():
			debug = kwargs.pop('debug', False)
			if debug:
				for key, value in kwargs.items():
					print(f'key: {key} - value: {value}')
		if 'background' in kwargs.keys():
			background = kwargs.pop('background')
			backgroundset = True
		if 'bg' in kwargs.keys():
			background = kwargs.pop('bg')
			backgroundset = True
		if 'foreground' in kwargs.keys():
			foreground = kwargs.pop('foreground')
			foregroundset = True
		if 'fg' in kwargs.keys():
			foreground = kwargs.pop('fg')
			foregroundset = True

		fontd = kwargs.pop('font', None)
		if 'text' in kwargs.keys():
			text = kwargs.pop('text')
			if (text == '') or (text == "\n"):
				text = current_text
			else:
				self.msgVar.set(text)
		reliefd = kwargs.pop('relief', 'flat')
		justifyd = kwargs.pop('justify', 'left')
		padxd = kwargs.pop('padx', 1)
		padyd = kwargs.pop('pady', 1)
		borderwidthd = kwargs.pop('borderwidth', 2)
		wid = self.msg      # The message widget which is the actual tooltip
		if backgroundset:
			wid.config(bg=background)
		if foregroundset:
			wid.config(fg=foreground)
		wid.config(font=fontd)
		wid.config(borderwidth=borderwidthd)
		wid.config(relief=reliefd)
		wid.config(justify=justifyd)
		wid.config(padx=padxd)
		wid.config(pady=padyd)
#                   End of Class ToolTip

# ================== Def ===================

# Return configuration in a Dict
def getConfig():
	try:
		f = open( _configFile,"r" )
		config = json.load( f )
		f.close()
	except Exception:
		# This is the default config, when the config file has a problem.
		# print( "error opening file: " + _configFile )
		configStr = """
		{
			"mode": "disable",
			"criteria" : {
				"no movie" : true,
				"title" : true,
				"URL" : false,
				"date" : false,
				"studio" : false,
				"performer" : true,
				"tag" : false,
				"details" : true,
				"organized" : false
			}
		}
		"""
		return json.loads(configStr)
	# file open and read successfully
	return config

def start_up():
	myGui.main()



